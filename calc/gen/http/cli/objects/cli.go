// Code generated by goa v3.2.5, DO NOT EDIT.
//
// objects HTTP client CLI support package
//
// Command:
// $ goa gen calc/design

package cli

import (
	objectsc "calc/gen/http/objects/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `objects (show|create)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` objects show --object-id "Mollitia cupiditate quibusdam."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		objectsFlags = flag.NewFlagSet("objects", flag.ContinueOnError)

		objectsShowFlags        = flag.NewFlagSet("show", flag.ExitOnError)
		objectsShowObjectIDFlag = objectsShowFlags.String("object-id", "REQUIRED", "Object ID")

		objectsCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		objectsCreateBodyFlag = objectsCreateFlags.String("body", "REQUIRED", "")
	)
	objectsFlags.Usage = objectsUsage
	objectsShowFlags.Usage = objectsShowUsage
	objectsCreateFlags.Usage = objectsCreateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "objects":
			svcf = objectsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "objects":
			switch epn {
			case "show":
				epf = objectsShowFlags

			case "create":
				epf = objectsCreateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "objects":
			c := objectsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data, err = objectsc.BuildShowPayload(*objectsShowObjectIDFlag)
			case "create":
				endpoint = c.Create()
				data, err = objectsc.BuildCreatePayload(*objectsCreateBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// objectsUsage displays the usage of the objects command and its subcommands.
func objectsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the objects service interface.
Usage:
    %s [globalflags] objects COMMAND [flags]

COMMAND:
    show: Get object by id
    create: Insert a new object

Additional help:
    %s objects COMMAND --help
`, os.Args[0], os.Args[0])
}
func objectsShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] objects show -object-id STRING

Get object by id
    -object-id STRING: Object ID

Example:
    `+os.Args[0]+` objects show --object-id "Mollitia cupiditate quibusdam."
`, os.Args[0])
}

func objectsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] objects create -body JSON

Insert a new object
    -body JSON: 

Example:
    `+os.Args[0]+` objects create --body '{
      "enabled": false,
      "id": "9",
      "key": "Nobis qui velit sed laudantium.",
      "logo": "Sunt ducimus facere doloribus modi iste.",
      "name": "Ullam quod."
   }'
`, os.Args[0])
}
