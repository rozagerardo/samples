// Code generated by goa v3.2.5, DO NOT EDIT.
//
// objects HTTP server types
//
// Command:
// $ goa gen calc/design

package server

import (
	objects "calc/gen/objects"
	objectsviews "calc/gen/objects/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "objects" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// A string to identify the Object.
	ID *string `bson:"_id" json:"id"`
	// Object's Key
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// Object's Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Object's Logo
	Logo *string `form:"logo,omitempty" json:"logo,omitempty" xml:"logo,omitempty"`
	// Object is enabled or not
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty" xml:"enabled,omitempty"`
}

// ShowResponseBodyFull is the type of the "objects" service "show" endpoint
// HTTP response body.
type ShowResponseBodyFull struct {
	// Unique object ID
	ID string `bson:"_id" json:"id"`
	// Key of Object
	Key string `form:"key" json:"key" xml:"key"`
	// Name of Object
	Name string `form:"name" json:"name" xml:"name"`
	// Logo of Object
	Logo *string `form:"logo,omitempty" json:"logo,omitempty" xml:"logo,omitempty"`
	// Object is enabled or not
	Enabled bool `form:"enabled" json:"enabled" xml:"enabled"`
	// Date when the Object was created default: now.
	CreatedDate *string `form:"createdDate,omitempty" json:"createdDate,omitempty" xml:"createdDate,omitempty"`
	// Date when the Object was updated default: now.
	UpdatedDate *string `form:"updatedDate,omitempty" json:"updatedDate,omitempty" xml:"updatedDate,omitempty"`
}

// CreateResponseBody is the type of the "objects" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Unique object ID
	ID string `bson:"_id" json:"id"`
	// Key of Object
	Key string `form:"key" json:"key" xml:"key"`
	// Name of Object
	Name string `form:"name" json:"name" xml:"name"`
	// Logo of Object
	Logo *string `form:"logo,omitempty" json:"logo,omitempty" xml:"logo,omitempty"`
	// Object is enabled or not
	Enabled bool `form:"enabled" json:"enabled" xml:"enabled"`
	// Date when the Object was created default: now.
	CreatedDate *string `form:"createdDate,omitempty" json:"createdDate,omitempty" xml:"createdDate,omitempty"`
	// Date when the Object was updated default: now.
	UpdatedDate *string `form:"updatedDate,omitempty" json:"updatedDate,omitempty" xml:"updatedDate,omitempty"`
}

// CreateResponseBodyFull is the type of the "objects" service "create"
// endpoint HTTP response body.
type CreateResponseBodyFull struct {
	// Unique object ID
	ID string `bson:"_id" json:"id"`
	// Key of Object
	Key string `form:"key" json:"key" xml:"key"`
	// Name of Object
	Name string `form:"name" json:"name" xml:"name"`
	// Logo of Object
	Logo *string `form:"logo,omitempty" json:"logo,omitempty" xml:"logo,omitempty"`
	// Object is enabled or not
	Enabled bool `form:"enabled" json:"enabled" xml:"enabled"`
	// Date when the Object was created default: now.
	CreatedDate *string `form:"createdDate,omitempty" json:"createdDate,omitempty" xml:"createdDate,omitempty"`
	// Date when the Object was updated default: now.
	UpdatedDate *string `form:"updatedDate,omitempty" json:"updatedDate,omitempty" xml:"updatedDate,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "objects" service "show"
// endpoint HTTP response body for the "NotFound" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadRequestResponseBody is the type of the "objects" service "show"
// endpoint HTTP response body for the "BadRequest" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateInternalServerErrorResponseBody is the type of the "objects" service
// "create" endpoint HTTP response body for the "InternalServerError" error.
type CreateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewShowResponseBodyFull builds the HTTP response body from the result of the
// "show" endpoint of the "objects" service.
func NewShowResponseBodyFull(res *objectsviews.ObjectMediaView) *ShowResponseBodyFull {
	body := &ShowResponseBodyFull{
		ID:          *res.ID,
		Key:         *res.Key,
		Name:        *res.Name,
		Logo:        res.Logo,
		Enabled:     *res.Enabled,
		CreatedDate: res.CreatedDate,
		UpdatedDate: res.UpdatedDate,
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "objects" service.
func NewCreateResponseBody(res *objectsviews.ObjectMediaView) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:          *res.ID,
		Key:         *res.Key,
		Name:        *res.Name,
		Logo:        res.Logo,
		Enabled:     *res.Enabled,
		CreatedDate: res.CreatedDate,
		UpdatedDate: res.UpdatedDate,
	}
	return body
}

// NewCreateResponseBodyFull builds the HTTP response body from the result of
// the "create" endpoint of the "objects" service.
func NewCreateResponseBodyFull(res *objectsviews.ObjectMediaView) *CreateResponseBodyFull {
	body := &CreateResponseBodyFull{
		ID:          *res.ID,
		Key:         *res.Key,
		Name:        *res.Name,
		Logo:        res.Logo,
		Enabled:     *res.Enabled,
		CreatedDate: res.CreatedDate,
		UpdatedDate: res.UpdatedDate,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "objects" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadRequestResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "objects" service.
func NewShowBadRequestResponseBody(res *goa.ServiceError) *ShowBadRequestResponseBody {
	body := &ShowBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateInternalServerErrorResponseBody builds the HTTP response body from
// the result of the "create" endpoint of the "objects" service.
func NewCreateInternalServerErrorResponseBody(res *goa.ServiceError) *CreateInternalServerErrorResponseBody {
	body := &CreateInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowPayload builds a objects service show endpoint payload.
func NewShowPayload(objectID string) *objects.ShowPayload {
	v := &objects.ShowPayload{}
	v.ObjectID = &objectID

	return v
}

// NewCreateObjectPost builds a objects service create endpoint payload.
func NewCreateObjectPost(body *CreateRequestBody) *objects.ObjectPost {
	v := &objects.ObjectPost{
		ID:   *body.ID,
		Key:  *body.Key,
		Name: *body.Name,
		Logo: body.Logo,
	}
	if body.Enabled != nil {
		v.Enabled = *body.Enabled
	}
	if body.Enabled == nil {
		v.Enabled = true
	}

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 1, true))
		}
	}
	return
}
