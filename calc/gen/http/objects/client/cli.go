// Code generated by goa v3.2.5, DO NOT EDIT.
//
// objects HTTP client CLI support package
//
// Command:
// $ goa gen calc/design

package client

import (
	objects "calc/gen/objects"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildShowPayload builds the payload for the objects show endpoint from CLI
// flags.
func BuildShowPayload(objectsShowObjectID string) (*objects.ShowPayload, error) {
	var objectID string
	{
		objectID = objectsShowObjectID
	}
	v := &objects.ShowPayload{}
	v.ObjectID = &objectID

	return v, nil
}

// BuildCreatePayload builds the payload for the objects create endpoint from
// CLI flags.
func BuildCreatePayload(objectsCreateBody string) (*objects.ObjectPost, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(objectsCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"enabled\": false,\n      \"id\": \"9\",\n      \"key\": \"Nobis qui velit sed laudantium.\",\n      \"logo\": \"Sunt ducimus facere doloribus modi iste.\",\n      \"name\": \"Ullam quod.\"\n   }'")
		}
		if utf8.RuneCountInString(body.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", body.ID, utf8.RuneCountInString(body.ID), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &objects.ObjectPost{
		ID:      body.ID,
		Key:     body.Key,
		Name:    body.Name,
		Logo:    body.Logo,
		Enabled: body.Enabled,
	}
	{
		var zero bool
		if v.Enabled == zero {
			v.Enabled = true
		}
	}

	return v, nil
}
