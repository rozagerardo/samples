// Code generated by goa v3.2.5, DO NOT EDIT.
//
// objects HTTP client types
//
// Command:
// $ goa gen calc/design

package client

import (
	objects "calc/gen/objects"
	objectsviews "calc/gen/objects/views"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "objects" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// A string to identify the Object.
	ID string `bson:"_id" json:"id"`
	// Object's Key
	Key string `form:"key" json:"key" xml:"key"`
	// Object's Name
	Name string `form:"name" json:"name" xml:"name"`
	// Object's Logo
	Logo *string `form:"logo,omitempty" json:"logo,omitempty" xml:"logo,omitempty"`
	// Object is enabled or not
	Enabled bool `form:"enabled" json:"enabled" xml:"enabled"`
}

// ShowResponseBody is the type of the "objects" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// Unique object ID
	ID *string `bson:"_id" json:"id"`
	// Key of Object
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// Name of Object
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Logo of Object
	Logo *string `form:"logo,omitempty" json:"logo,omitempty" xml:"logo,omitempty"`
	// Object is enabled or not
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty" xml:"enabled,omitempty"`
	// Date when the Object was created default: now.
	CreatedDate *string `form:"createdDate,omitempty" json:"createdDate,omitempty" xml:"createdDate,omitempty"`
	// Date when the Object was updated default: now.
	UpdatedDate *string `form:"updatedDate,omitempty" json:"updatedDate,omitempty" xml:"updatedDate,omitempty"`
}

// CreateResponseBody is the type of the "objects" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Unique object ID
	ID *string `bson:"_id" json:"id"`
	// Key of Object
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// Name of Object
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Logo of Object
	Logo *string `form:"logo,omitempty" json:"logo,omitempty" xml:"logo,omitempty"`
	// Object is enabled or not
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty" xml:"enabled,omitempty"`
	// Date when the Object was created default: now.
	CreatedDate *string `form:"createdDate,omitempty" json:"createdDate,omitempty" xml:"createdDate,omitempty"`
	// Date when the Object was updated default: now.
	UpdatedDate *string `form:"updatedDate,omitempty" json:"updatedDate,omitempty" xml:"updatedDate,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "objects" service "show"
// endpoint HTTP response body for the "NotFound" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowBadRequestResponseBody is the type of the "objects" service "show"
// endpoint HTTP response body for the "BadRequest" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateInternalServerErrorResponseBody is the type of the "objects" service
// "create" endpoint HTTP response body for the "InternalServerError" error.
type CreateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "objects" service.
func NewCreateRequestBody(p *objects.ObjectPost) *CreateRequestBody {
	body := &CreateRequestBody{
		ID:      p.ID,
		Key:     p.Key,
		Name:    p.Name,
		Logo:    p.Logo,
		Enabled: p.Enabled,
	}
	{
		var zero bool
		if body.Enabled == zero {
			body.Enabled = true
		}
	}
	return body
}

// NewShowObjectMediaOK builds a "objects" service "show" endpoint result from
// a HTTP "OK" response.
func NewShowObjectMediaOK(body *ShowResponseBody) *objectsviews.ObjectMediaView {
	v := &objectsviews.ObjectMediaView{
		ID:          body.ID,
		Key:         body.Key,
		Name:        body.Name,
		Logo:        body.Logo,
		Enabled:     body.Enabled,
		CreatedDate: body.CreatedDate,
		UpdatedDate: body.UpdatedDate,
	}

	return v
}

// NewShowNotFound builds a objects service show endpoint NotFound error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowBadRequest builds a objects service show endpoint BadRequest error.
func NewShowBadRequest(body *ShowBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateObjectMediaOK builds a "objects" service "create" endpoint result
// from a HTTP "OK" response.
func NewCreateObjectMediaOK(body *CreateResponseBody) *objectsviews.ObjectMediaView {
	v := &objectsviews.ObjectMediaView{
		ID:          body.ID,
		Key:         body.Key,
		Name:        body.Name,
		Logo:        body.Logo,
		Enabled:     body.Enabled,
		CreatedDate: body.CreatedDate,
		UpdatedDate: body.UpdatedDate,
	}

	return v
}

// NewCreateInternalServerError builds a objects service create endpoint
// InternalServerError error.
func NewCreateInternalServerError(body *CreateInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_NotFound_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowBadRequestResponseBody runs the validations defined on
// show_BadRequest_response_body
func ValidateShowBadRequestResponseBody(body *ShowBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateInternalServerErrorResponseBody runs the validations defined
// on create_InternalServerError_response_body
func ValidateCreateInternalServerErrorResponseBody(body *CreateInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
