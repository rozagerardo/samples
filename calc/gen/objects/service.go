// Code generated by goa v3.2.5, DO NOT EDIT.
//
// objects service
//
// Command:
// $ goa gen calc/design

package objects

import (
	objectsviews "calc/gen/objects/views"
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service is the objects service interface.
type Service interface {
	// Get object by id
	Show(context.Context, *ShowPayload) (res *ObjectMedia, err error)
	// Insert a new object
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "full"
	Create(context.Context, *ObjectPost) (res *ObjectMedia, view string, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "objects"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"show", "create"}

// ShowPayload is the payload type of the objects service show method.
type ShowPayload struct {
	// Object ID
	ObjectID *string
}

// ObjectMedia is the result type of the objects service show method.
type ObjectMedia struct {
	// Unique object ID
	ID string `bson:"_id" json:"id"`
	// Key of Object
	Key string
	// Name of Object
	Name string
	// Logo of Object
	Logo *string
	// Object is enabled or not
	Enabled bool
	// Date when the Object was created default: now.
	CreatedDate *string
	// Date when the Object was updated default: now.
	UpdatedDate *string
}

// ObjectPost is the payload type of the objects service create method.
type ObjectPost struct {
	// A string to identify the Object.
	ID string `bson:"_id" json:"id"`
	// Object's Key
	Key string
	// Object's Name
	Name string
	// Object's Logo
	Logo *string
	// Object is enabled or not
	Enabled bool
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "InternalServerError",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewObjectMedia initializes result type ObjectMedia from viewed result type
// ObjectMedia.
func NewObjectMedia(vres *objectsviews.ObjectMedia) *ObjectMedia {
	var res *ObjectMedia
	switch vres.View {
	case "default", "":
		res = newObjectMedia(vres.Projected)
	case "full":
		res = newObjectMediaFull(vres.Projected)
	}
	return res
}

// NewViewedObjectMedia initializes viewed result type ObjectMedia from result
// type ObjectMedia using the given view.
func NewViewedObjectMedia(res *ObjectMedia, view string) *objectsviews.ObjectMedia {
	var vres *objectsviews.ObjectMedia
	switch view {
	case "default", "":
		p := newObjectMediaView(res)
		vres = &objectsviews.ObjectMedia{Projected: p, View: "default"}
	case "full":
		p := newObjectMediaViewFull(res)
		vres = &objectsviews.ObjectMedia{Projected: p, View: "full"}
	}
	return vres
}

// NewObjectMedia initializes result type ObjectMedia from viewed result type
// ObjectMedia.
func NewObjectMedia(vres *objectsviews.ObjectMedia) *ObjectMedia {
	var res *ObjectMedia
	switch vres.View {
	case "default", "":
		res = newObjectMedia(vres.Projected)
	case "full":
		res = newObjectMediaFull(vres.Projected)
	}
	return res
}

// NewViewedObjectMedia initializes viewed result type ObjectMedia from result
// type ObjectMedia using the given view.
func NewViewedObjectMedia(res *ObjectMedia, view string) *objectsviews.ObjectMedia {
	var vres *objectsviews.ObjectMedia
	switch view {
	case "default", "":
		p := newObjectMediaView(res)
		vres = &objectsviews.ObjectMedia{Projected: p, View: "default"}
	case "full":
		p := newObjectMediaViewFull(res)
		vres = &objectsviews.ObjectMedia{Projected: p, View: "full"}
	}
	return vres
}

// newObjectMedia converts projected type ObjectMedia to service type
// ObjectMedia.
func newObjectMedia(vres *objectsviews.ObjectMediaView) *ObjectMedia {
	res := &ObjectMedia{
		Logo:        vres.Logo,
		CreatedDate: vres.CreatedDate,
		UpdatedDate: vres.UpdatedDate,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Key != nil {
		res.Key = *vres.Key
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Enabled != nil {
		res.Enabled = *vres.Enabled
	}
	if vres.Enabled == nil {
		res.Enabled = true
	}
	return res
}

// newObjectMediaFull converts projected type ObjectMedia to service type
// ObjectMedia.
func newObjectMediaFull(vres *objectsviews.ObjectMediaView) *ObjectMedia {
	res := &ObjectMedia{
		Logo:        vres.Logo,
		CreatedDate: vres.CreatedDate,
		UpdatedDate: vres.UpdatedDate,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Key != nil {
		res.Key = *vres.Key
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Enabled != nil {
		res.Enabled = *vres.Enabled
	}
	if vres.Enabled == nil {
		res.Enabled = true
	}
	return res
}

// newObjectMediaView projects result type ObjectMedia to projected type
// ObjectMediaView using the "default" view.
func newObjectMediaView(res *ObjectMedia) *objectsviews.ObjectMediaView {
	vres := &objectsviews.ObjectMediaView{
		ID:          &res.ID,
		Key:         &res.Key,
		Name:        &res.Name,
		Logo:        res.Logo,
		Enabled:     &res.Enabled,
		CreatedDate: res.CreatedDate,
		UpdatedDate: res.UpdatedDate,
	}
	return vres
}

// newObjectMediaViewFull projects result type ObjectMedia to projected type
// ObjectMediaView using the "full" view.
func newObjectMediaViewFull(res *ObjectMedia) *objectsviews.ObjectMediaView {
	vres := &objectsviews.ObjectMediaView{
		ID:          &res.ID,
		Key:         &res.Key,
		Name:        &res.Name,
		Logo:        res.Logo,
		Enabled:     &res.Enabled,
		CreatedDate: res.CreatedDate,
		UpdatedDate: res.UpdatedDate,
	}
	return vres
}
