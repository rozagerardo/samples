// Code generated by goa v3.2.5, DO NOT EDIT.
//
// objects views
//
// Command:
// $ goa gen calc/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// ObjectMedia is the viewed result type that is projected based on a view.
type ObjectMedia struct {
	// Type to project
	Projected *ObjectMediaView
	// View to render
	View string
}

// ObjectMedia is the viewed result type that is projected based on a view.
type ObjectMedia struct {
	// Type to project
	Projected *ObjectMediaView
	// View to render
	View string
}

// ObjectMediaView is a type that runs validations on a projected type.
type ObjectMediaView struct {
	// Unique object ID
	ID *string `bson:"_id" json:"id"`
	// Key of Object
	Key *string
	// Name of Object
	Name *string
	// Logo of Object
	Logo *string
	// Object is enabled or not
	Enabled *bool
	// Date when the Object was created default: now.
	CreatedDate *string
	// Date when the Object was updated default: now.
	UpdatedDate *string
}

var (
	// ObjectMediaMap is a map of attribute names in result type ObjectMedia
	// indexed by view name.
	ObjectMediaMap = map[string][]string{
		"default": []string{
			"id",
			"key",
			"name",
			"logo",
			"enabled",
			"createdDate",
			"updatedDate",
		},
		"full": []string{
			"id",
			"key",
			"name",
			"logo",
			"enabled",
			"createdDate",
			"updatedDate",
		},
	}
)

// ValidateObjectMedia runs the validations defined on the viewed result type
// ObjectMedia.
func ValidateObjectMedia(result *ObjectMedia) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateObjectMediaView(result.Projected)
	case "full":
		err = ValidateObjectMediaViewFull(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "full"})
	}
	return
}

// ValidateObjectMedia runs the validations defined on the viewed result type
// ObjectMedia.
func ValidateObjectMedia(result *ObjectMedia) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateObjectMediaView(result.Projected)
	case "full":
		err = ValidateObjectMediaViewFull(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "full"})
	}
	return
}

// ValidateObjectMediaView runs the validations defined on ObjectMediaView
// using the "default" view.
func ValidateObjectMediaView(result *ObjectMediaView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Enabled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enabled", "result"))
	}
	if result.ID != nil {
		if utf8.RuneCountInString(*result.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.id", *result.ID, utf8.RuneCountInString(*result.ID), 1, true))
		}
	}
	if result.CreatedDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.createdDate", *result.CreatedDate, goa.FormatDateTime))
	}
	if result.UpdatedDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updatedDate", *result.UpdatedDate, goa.FormatDateTime))
	}
	return
}

// ValidateObjectMediaViewFull runs the validations defined on ObjectMediaView
// using the "full" view.
func ValidateObjectMediaViewFull(result *ObjectMediaView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Enabled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enabled", "result"))
	}
	if result.ID != nil {
		if utf8.RuneCountInString(*result.ID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.id", *result.ID, utf8.RuneCountInString(*result.ID), 1, true))
		}
	}
	if result.CreatedDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.createdDate", *result.CreatedDate, goa.FormatDateTime))
	}
	if result.UpdatedDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updatedDate", *result.UpdatedDate, goa.FormatDateTime))
	}
	return
}
